@using Settlements.Client.DTOs
@using Settlements.Client.Services
@inject HostClient HostClient

<DisplayHttpResponse ResponseJsonString="@_httpResponseMessageJsonString"
                     IsResponseStatusSuccess="@_isResponseStatusSuccess" />

@if (_displayForm)
{
    <EditForm Model="@Settlement" OnValidSubmit="@HandleValidSubmit" OnInvalidSubmit="@HandleInvalidSubmit">
        <DataAnnotationsValidator />

        <table class="table text-center" style="table-layout: fixed">
            <tbody>
                <tr>
                    <td class="text-end">Country</td>
                    <td class="text-start">
                        <ValidationMessage For="@(() => Settlement.CountryId)" />
                        <InputSelect @bind-Value="Settlement.CountryId">
                            <option value=0 hidden>&nbsp;</option>
                            @foreach (var country in Countries)
                            {
                                <option value=@country.Id>@country.Name</option>
                            }
                        </InputSelect>
                    </td>
                </tr>
                <tr>
                    <td class="text-end">Postal code</td>
                    <td class="text-start">
                        <ValidationMessage For="@(() => Settlement.PostalCode)" />
                        <InputText @bind-Value="Settlement.PostalCode" />
                    </td>
                </tr>
                <tr>
                    <td class="text-end">Name</td>
                    <td class="text-start">
                        <ValidationMessage For="@(() => Settlement.Name)" />
                        <InputText @bind-Value="Settlement.Name" />
                    </td>
                </tr>
            </tbody>
        </table>

        <div class="text-center mt-1">
            <button type="submit" class="btn btn-primary">Submit</button>
        </div>
        <div class="text-center mt-1">
            <button type="buton" class="btn btn-link" @onclick="HandleCancelButtonClick">Cancel</button>
        </div>
    </EditForm>
}
else
{
    <div class="text-center mt-1">
        <button type="submit" class="btn btn-primary" @onclick="HandleCreateNewButtonClick">Create new</button>
    </div>
}

@code {
    [Parameter]
    public IEnumerable<CountryDTO> Countries { get; set; } = null!;

    [Parameter]
    public EventCallback OnSuccessfullyAdded { get; set; }

    private SettlementDTO Settlement { get; set; } = new SettlementDTO();

    private string? _httpResponseMessageJsonString;

    private bool? _isResponseStatusSuccess;

    private bool _displayForm = false;

    private async Task HandleValidSubmit() 
    {
        var response = await HostClient.CreateSettlementDTOAsync(Settlement);
        _isResponseStatusSuccess = response.IsSuccessStatusCode;

        if (response.IsSuccessStatusCode)
        {
            Settlement = new SettlementDTO();
            _displayForm = false;
            await OnSuccessfullyAdded.InvokeAsync();
        }
        else
        {
            _httpResponseMessageJsonString = await response.Content.ReadAsStringAsync();
        }
    }

    private void HandleInvalidSubmit()
    {
        _isResponseStatusSuccess = null;
        _httpResponseMessageJsonString = null;
    }

    private void HandleCreateNewButtonClick()
    {
        _displayForm = true;
        _isResponseStatusSuccess = null;
    }

    private void HandleCancelButtonClick()
    {
        _displayForm = false;
        Settlement = new SettlementDTO();
        _isResponseStatusSuccess = null;
    }
}
