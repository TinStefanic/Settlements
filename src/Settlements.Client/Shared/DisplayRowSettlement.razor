@using Settlements.Client.DTOs
@using Settlements.Client.Services
@using Settlements.Client.Utility
@inject IJSRuntime JsRuntime
@inject HostClient HostClient


@if (_readOnly)
{
    <table class="table text-center" style="table-layout: fixed">
        <tbody>
            <tr>
                <td>@SettlementsCountryName</td>
                <td>@Settlement?.PostalCode</td>
                <td>@Settlement?.Name</td>
                <td>
                    <button type="button" class="btn btn-link" @onclick="MakeEntryEditable">
                        Edit
                    </button>
                    <button type="button" class="btn btn-danger" @onclick="HandleDelete">
                        Delete
                    </button>
                </td>
            </tr>
        </tbody>
    </table>
}
else
{
    <EditForm Model="@Settlement" OnValidSubmit="@HandleValidSubmit" OnInvalidSubmit="@HandleInvalidSubmit">
        <DataAnnotationsValidator />

        <table class="table text-center" style="table-layout: fixed">
            <tbody>
                <tr>
                    <td>
                        <ValidationMessage For="@(() => Settlement.CountryId)" />
                        <InputSelect @bind-Value="Settlement.CountryId">
                            <option value=0 hidden>&nbsp;</option>
                            @foreach (var country in Countries)
                            {
                                <option value=@country.Id>@country.Name</option>
                            }
                        </InputSelect>
                    </td>
                    <td>
                        <ValidationMessage For="@(() => Settlement.PostalCode)" />
                        <InputText @bind-Value="Settlement.PostalCode" />
                    </td>
                    <td>
                        <ValidationMessage For="@(() => Settlement.Name)" />
                        <InputText @bind-Value="Settlement.Name" />
                    </td>
                    <td>
                        <button type="submit" class="btn btn-primary">
                            Submit
                        </button>
                        <button type="buton" class="btn btn-link" @onclick="HandleCancelButtonClick">
                            Cancel
                        </button>
                    </td>
                </tr>
            </tbody>
        </table>
    </EditForm>
}


@code {
    [Parameter]
    public IEnumerable<CountryDTO> Countries { get; set; } = null!;

    [Parameter]
    public SettlementDTO Settlement { get; set; } = null!;

    [Parameter]
    public EventCallback OnChange { get; set; }

    private bool _readOnly = true;

    private string SettlementsCountryName => Countries.FirstOrDefault(c => c.Id == Settlement.CountryId)?.Name!;

    private void MakeEntryEditable()
    {
        _readOnly = false;
    }

    protected override void OnParametersSet()
    {
        _readOnly = true;
    }

    private async Task HandleValidSubmit()
    {
        var response = await HostClient.UpdateSettlementDTOAsync(Settlement.Id, Settlement);

        if (response.IsSuccessStatusCode)
        {
            _readOnly = true;
        }
        else
        {
            var jsonString = await response.Content.ReadAsStringAsync();
            var jsonResponseStringParser = new ParseHttpResponseJsonString(jsonString);
            string validationErrorsString = string.Join('\n', jsonResponseStringParser.ToIEnumerableString());
            await JsRuntime.InvokeVoidAsync("alert", validationErrorsString);
        }
    }

    private async Task HandleInvalidSubmit(EditContext editContext)
    {
        string validationErrorsString = string.Join('\n', editContext.GetValidationMessages());
        await JsRuntime.InvokeVoidAsync("alert", validationErrorsString);
    }

    private async Task HandleDelete()
    {
        var response = await HostClient.DeleteSettlementDTOAsync(Settlement.Id);

        if (response.IsSuccessStatusCode)
        {
            await OnChange.InvokeAsync();
        }
        else 
        {
            await JsRuntime.InvokeVoidAsync("alert", "Delete failed!");
        }
    }

    private async Task HandleCancelButtonClick()
    {
        _readOnly = true;
        await OnChange.InvokeAsync();
    }
}
