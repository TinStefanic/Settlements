@using Settlements.Client.DTOs
@using Settlements.Client.Services
@inject HostClient HostClient

<EditForm Model="@Settlement" OnValidSubmit="@HandleValidSubmit" OnInvalidSubmit="@HandleInvalidSubmit">
    <DataAnnotationsValidator />
    <div class="text-center mt-1">
        <ValidationSummary />
        <DisplayHttpResponse 
            ResponseJsonString="@_httpResponseMessageJsonString" 
            IsResponseStatusSuccess="@_isResponseStatusSuccess"
        />
    </div>

    <table class="table text-center" style="table-layout: fixed">
        <tbody>
            <tr>
                <td>Name</td>
                <td><InputText @bind-Value="Settlement.Name" /></td>
            </tr>
            <tr>
                <td>Country</td>
                <td>
                    <InputSelect @bind-Value="Settlement.CountryId">
                        <option value=0 hidden>&nbsp;</option>
                        @foreach (var country in Countries)
                        {
                            <option value=@country.Id>@country.Name</option>
                        }
                    </InputSelect>
                </td>
            </tr>
            <tr>
                <td>Postal code</td>
                <td><InputText @bind-Value="Settlement.PostalCode" /></td>
            </tr>
        </tbody>
    </table>

    <div class="text-center mt-1">
        <button type="submit" class="btn btn-primary">Submit</button>
    </div>
</EditForm>

@code {
    [Parameter]
    public IEnumerable<CountryDTO> Countries { get; set; } = null!;

    [Parameter]
    public EventCallback OnSuccessfullyAdded { get; set; }

    private SettlementDTO Settlement { get; set; } = new SettlementDTO();

    private string? _httpResponseMessageJsonString;

    private bool? _isResponseStatusSuccess;

    private async Task HandleValidSubmit() 
    {
        var response = await HostClient.CreateSettlementDTOAsync(Settlement);
        _isResponseStatusSuccess = response.IsSuccessStatusCode;

        if (response.IsSuccessStatusCode)
        {
            Settlement = new SettlementDTO();
            await OnSuccessfullyAdded.InvokeAsync();
        }
        else
        {
            _httpResponseMessageJsonString = await response.Content.ReadAsStringAsync();
        }
    }

    private void HandleInvalidSubmit()
    {
        _isResponseStatusSuccess = null;
        _httpResponseMessageJsonString = null;
    }
}
